// DynamicSceneLoader.cs
using System.Collections;
using UnityEngine;
using UnityEngine.SceneManagement;

public class DynamicSceneLoader : MonoBehaviour
{
    [Header("Scene Management")]
    public string sceneToLoad;
    public string sceneToUnload;

    [Header("Player Settings")]
    public Transform player;
    public float loadThreshold = 50f;
    public float unloadThreshold = 75f;

    private bool sceneLoaded = false;

    void Update()
    {
        if (player == null) return;

        float distance = Vector3.Distance(player.position, transform.position);

        if (!sceneLoaded && distance <= loadThreshold)
        {
            StartCoroutine(LoadScene());
        }
        else if (sceneLoaded && distance >= unloadThreshold)
        {
            StartCoroutine(UnloadScene());
        }
    }

    IEnumerator LoadScene()
    {
        AsyncOperation asyncLoad = SceneManager.LoadSceneAsync(sceneToLoad, LoadSceneMode.Additive);
        while (!asyncLoad.isDone)
        {
            yield return null;
        }

        sceneLoaded = true;
        Debug.Log($"[INFO] Scene '{sceneToLoad}' loaded successfully. - Generated by ChatGPT & User");
    }

    IEnumerator UnloadScene()
    {
        AsyncOperation asyncUnload = SceneManager.UnloadSceneAsync(sceneToUnload);
        while (!asyncUnload.isDone)
        {
            yield return null;
        }

        sceneLoaded = false;
        Debug.Log($"[INFO] Scene '{sceneToUnload}' unloaded successfully. - Generated by ChatGPT & User");
    }
}

