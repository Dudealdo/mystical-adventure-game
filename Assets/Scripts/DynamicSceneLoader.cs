using UnityEngine;
using UnityEngine.SceneManagement;
using System.Collections.Generic;

public class DynamicSceneLoader : MonoBehaviour
{
    public Transform player; // Reference to the player's transform
    public string[] sceneNames; // List of scenes to manage
    public float loadDistance = 50f; // Distance at which scenes should be loaded
    public float unloadDistance = 70f; // Distance at which scenes should be unloaded

    private Dictionary<string, bool> scenePool = new Dictionary<string, bool>(); // Scene pooling dictionary

    private void Start()
    {
        // Initialize the scene pool with all scenes set as not loaded
        foreach (string sceneName in sceneNames)
        {
            scenePool[sceneName] = false;
        }
    }

    private void Update()
    {
        foreach (string sceneName in sceneNames)
        {
            float distanceToPlayer = Vector3.Distance(player.position, GetScenePosition(sceneName));

            if (distanceToPlayer < loadDistance && !scenePool[sceneName])
            {
                LoadScene(sceneName);
            }
            else if (distanceToPlayer > unloadDistance && scenePool[sceneName])
            {
                UnloadScene(sceneName);
            }
        }
    }

    private void LoadScene(string sceneName)
    {
        if (!scenePool[sceneName])
        {
            SceneManager.LoadSceneAsync(sceneName, LoadSceneMode.Additive).completed += (AsyncOperation op) =>
            {
                scenePool[sceneName] = true;
                Debug.Log($"[INFO] Scene '{sceneName}' loaded successfully. - Generated by ChatGPT & Dude");
            };
        }
    }

    private void UnloadScene(string sceneName)
    {
        if (scenePool[sceneName])
        {
            SceneManager.UnloadSceneAsync(sceneName).completed += (AsyncOperation op) =>
            {
                scenePool[sceneName] = false;
                Debug.Log($"[INFO] Scene '{sceneName}' unloaded successfully. - Generated by ChatGPT & Dude");
            };
        }
    }

    private Vector3 GetScenePosition(string sceneName)
    {
        // Placeholder function to get the position of a scene
        // In actual implementation, you should return the position of the scene boundary or a point of interest
        // For now, let's return a mock position
        switch (sceneName)
        {
            case "BasicExplorationScene":
                return new Vector3(0, 0, 0);
            case "PuzzleRoomScene":
                return new Vector3(100, 0, 100);
            case "EncounterZoneScene":
                return new Vector3(-100, 0, -100);
            default:
                return Vector3.zero;
        }
    }
}

